import "bls12381.scrypt";

struct Pair {PointG1 g1; PointG2 g2;}
struct Engine {
	// Pair [3]pairs;
	Pair [1]pairs; //rororo
    int idxP;
}

library BLS12381Pairing {
    // 2 ^ (-1)
    static const fe twoInv = 0x17fbb8571a006596d3916126f2d14ca26e22d1ec31ebb502633cb57c253c276f855000053ab000011804000000015554;

    static const int x = 0xd201000000010000;
    static const bytes X = b'd201000000010000';
    static const bytes MASK = b'0000000000000001';
    static const bytes ZERO = b'0000000000000000';
    // static const int PAIR_LEN = 3;
    static const int PAIR_LEN = 1; //rororo

    static const fe2 [10]Fe2_10Zero = repeat(BLS12381.Fe2Zero, 10);

    //--------------------- pairing.go
/*
    static function NewPairingEngine() : Engine {
        Pair [PAIR_LEN]pairs = [{BLS12381.PtG1Zero, BLS12381.Fe6Zero}];
        return {pairs, 0};
    }
    
    static function isZeroPair(Pair p) : bool {
        return BLS12381.IsZeroG1(p.g1) || BLS12381.IsZeroG2(p.g2);
    }

    static function affinePair(Pair p) : Pair {
        return {BLS12381.AffineG1(p.g1), BLS12381.AffineG2(p.g2)};
    }

    static function AddPair(Engine eng, PointG1 g1, PointG2 g2) : Engine {
        if(isZeroPair({g1, g2}) == false) {
            Pair pr = affinePair({g1, g2});
            eng.pairs[eng.idxP] = pr;
            eng.idxP += 1;
        }
        return eng;
    }

    static function AddPairInv(Engine eng, PointG1 g1, PointG2 g2) : Engine {
        return AddPair(eng, BLS12381.NegG1(g1), g2);
    }

    static function ResetPair(Engine eng) : Engine {
        eng.pairs = [
            {BLS12381.PtG1Zero, BLS12381.Fe6Zero}];
        eng.idxP = 0;
        return eng;
    }

    // Adaptation of Formula 3 in https://eprint.iacr.org/2010/526.pdf
    static function doublingStep(fe2 [3]coeff, PointG2 r) : fe12 {
        fe2 [10]t = Fe2_10Zero;
        fe6 rr = BLS12381.Fe6Zero;

        t[0] = BLS12381.mulFe2(r[0], r[1]);
        t[0] = BLS12381.mulByFqFe2(t[0], twoInv);
        t[1] = BLS12381.squareFe2(r[1]);
        t[2] = BLS12381.squareFe2(r[2]);
        t[7] = BLS12381.doubleFe2(t[2]);
        t[7] = BLS12381.addFe2(t[7], t[2]);
        t[3] = BLS12381.mulByBFe2(t[7]);
        t[4] = BLS12381.doubleFe2(t[3]);
        t[4] = BLS12381.addFe2(t[4], t[3]);
        t[5] = BLS12381.addFe2(t[1], t[4]);
        t[5] = BLS12381.mulByFqFe2(t[5], twoInv);
        t[6] = BLS12381.addFe2(r[1], r[2]);
        t[6] = BLS12381.squareFe2(t[6]);
        t[7] = BLS12381.addFe2(t[2], t[1]);
        t[6] = BLS12381.subFe2(t[6], t[7]);
        coeff[0] = BLS12381.subFe2(t[3], t[1]);
        t[7] = BLS12381.squareFe2(r[0]);
        t[4] = BLS12381.subFe2(t[1], t[4]);

        rr[0] = BLS12381.mulFe2(t[4], t[0]);

        t[2] = BLS12381.squareFe2(t[3]);
        t[3] = BLS12381.doubleFe2(t[2]);
        t[3] = BLS12381.addFe2(t[3], t[2]);
        t[5] = BLS12381.squareFe2(t[5]);
        rr[1] = BLS12381.subFe2(t[5], t[3]);
        rr[2] = BLS12381.mulFe2(t[1], t[6]);
        t[0] = BLS12381.doubleFe2(t[7]);
        coeff[1] = BLS12381.addFe2(t[0], t[7]);
        coeff[2] = BLS12381.negFe2(t[6]);

        return [coeff, rr];
    }

    // Algorithm 12 in https://eprint.iacr.org/2010/526.pdf
    static function additionStep(fe2[3] coeff, PointG2 r, PointG2 q) : fe12 {
        fe2 [10]t = Fe2_10Zero;

        t[0] = BLS12381.mulFe2(q[1], r[2]);
        t[0] = BLS12381.negFe2(t[0]);
        t[0] = BLS12381.addFe2(t[0], r[1]);
        t[1] = BLS12381.mulFe2(q[0], r[2]);
        t[1] = BLS12381.negFe2(t[1]);
        t[1] = BLS12381.addFe2(t[1], r[0]);
        t[2] = BLS12381.squareFe2(t[0]);
        t[3] = BLS12381.squareFe2(t[1]);
        t[4] = BLS12381.mulFe2(t[1], t[3]);
        t[2] = BLS12381.mulFe2(r[2], t[2]);
        t[3] = BLS12381.mulFe2(r[0], t[3]);
        t[5] = BLS12381.doubleFe2(t[3]);
        t[5] = BLS12381.subFe2(t[4], t[5]);
        t[5] = BLS12381.addFe2(t[5], t[2]);

        r[0] = BLS12381.mulFe2(t[1], t[5]);
        t[2] = BLS12381.subFe2(t[3], t[5]);
        t[2] = BLS12381.mulFe2(t[2], t[0]);
        t[3] = BLS12381.mulFe2(r[1], t[4]);
        r[1] = BLS12381.subFe2(t[2], t[3]);
        r[2] = BLS12381.mulFe2(r[2], t[4]);
        t[2] = BLS12381.mulFe2(t[1], q[1]);
        t[3] = BLS12381.mulFe2(t[0], q[0]);
        coeff[0] = BLS12381.subFe2(t[3], t[2]);
        coeff[1] = BLS12381.negFe2(t[0]);
        coeff[2] = t[1];

        return [coeff, r];
    }

    // Algorithm 5 in  https://eprint.iacr.org/2019/077.pdf
    static function preCompute(fe2[68][3] ellCoeffs, PointG2 twistPoint) : fe2[68][3] {
        if(BLS12381.IsZeroG2(twistPoint) == false) {
            PointG2 r = twistPoint;
            int j = 0;
            int XBits = 62;
            fe12 rtn = BLS12381.Fe12Zero;
            loop(63) : i {
                rtn = doublingStep(ellCoeffs[j], r);
                ellCoeffs[j] = rtn[0];
                r = rtn[1];

                if ((X & (MASK << (XBits - i))) != ZERO) {
                    j++;
                    rtn = additionStep(ellCoeffs[j], r, twistPoint);
                    ellCoeffs[j] = rtn[0];
                    r = rtn[1];
                }
                j++;
            }
        }

        return ellCoeffs;
    }

    static function millerLoop(Engine eng) : fe12 {
        fe2[PAIR_LEN][68][3] ellCoeffs = [repeat(BLS12381.Fe6Zero, 68)];
        
        loop(PAIR_LEN) : i {
            if(i < eng.idxP) {
                ellCoeffs[i] = preCompute(ellCoeffs[i], eng.pairs[i].g2);
            }
        }

        fe12 f = BLS12381.oneFe12();
        fe2 [10]t2 = Fe2_10Zero;
        int j = 0;
        int XBits = 62;
        loop(63) : k {
            if(62 - k != 62) {
                f = BLS12381.squareFe12(f);
            }
            loop(PAIR_LEN) : i {
                if(i < eng.idxP) {
                    t2[0] = BLS12381.mulByFqFe2(ellCoeffs[i][j][2], eng.pairs[i].g1[1]);
                    t2[1] = BLS12381.mulByFqFe2(ellCoeffs[i][j][1], eng.pairs[i].g1[0]);
                    f = BLS12381.mulBy014AssignFe12(f, ellCoeffs[i][j][0], t2[1], t2[0]);
                }
            }
            if ((X & (MASK << (XBits - k))) != ZERO) {
                j++;
                loop(PAIR_LEN) : i {
                    if(i < eng.idxP) {
                        t2[0] = BLS12381.mulByFqFe2(ellCoeffs[i][j][2], eng.pairs[i].g1[1]);
                        t2[1] = BLS12381.mulByFqFe2(ellCoeffs[i][j][1], eng.pairs[i].g1[0]);
                        f = BLS12381.mulBy014AssignFe12(f, ellCoeffs[i][j][0], t2[1], t2[0]);
                    }
                }
            }
            j++;
        }

        f = BLS12381.conjugateFe12(f);
        return f;
    }
*/

    static function expPair(fe12 a) : fe12 {
        fe12 c = BLS12381.cyclotomicExp(a, x);
        c = BLS12381.conjugateFe12(c);
        return c;
    }

    static function finalExp(fe12 f) : fe12 {
        fe12 [9]t = repeat(BLS12381.Fe12Zero, 9);

        t[0] = BLS12381.frobeniusMapFe12(f, 6);

        t[1] = BLS12381.inverseFe12(f);

        t[2] = BLS12381.mulFe12(t[0], t[1]);
        t[1] = t[2];
        t[2] = BLS12381.frobeniusMapFe12(t[2], 2);
        t[2] = BLS12381.mulFe12(t[2], t[1]);
        t[1] = BLS12381.cyclotomicSquare(t[2]);
        t[1] = BLS12381.conjugateFe12(t[1]);

        // hard part
        t[3] = expPair(t[2]);

        t[4] = BLS12381.cyclotomicSquare(t[3]);
        t[5] = BLS12381.mulFe12(t[1], t[3]);
        t[1] = expPair(t[5]);
        t[0] = expPair(t[1]);
        t[6] = expPair(t[0]);

        t[6] = BLS12381.mulFe12(t[6], t[4]);
        t[4] = expPair(t[6]);
        t[5] = BLS12381.conjugateFe12(t[5]);
        t[4] = BLS12381.mulFe12(t[4], t[5]);
        t[4] = BLS12381.mulFe12(t[4], t[2]);
        
        t[5] = BLS12381.conjugateFe12(t[2]);
        t[1] = BLS12381.mulFe12(t[1], t[2]);
        t[1] = BLS12381.frobeniusMapFe12(t[1], 3);
        t[6] = BLS12381.mulFe12(t[6], t[5]);
        t[6] = BLS12381.frobeniusMapFe12(t[6], 1);

        t[3] = BLS12381.mulFe12(t[3], t[0]);
        t[3] = BLS12381.frobeniusMapFe12(t[3], 2);
        t[3] = BLS12381.mulFe12(t[3], t[1]);
        t[3] = BLS12381.mulFe12(t[3], t[6]);
        f = BLS12381.mulFe12(t[3], t[4]);
        return f;
    }

    // Check three pairs.
    // millerb1a1 + A * B + inputs * (-gamma) + C * (-delta) == 1
    static function pairCheck3Point(
            PointG1 a0, PointG2 b0,
            fe12 millerb1a1,
            PointG1 a2, PointG2 b2,
            PointG1 a3, PointG2 b3) : bool {
/*
        Engine eng = NewPairingEngine();

        fe12 f2 = BLS12381.Fe12Zero;
        fe12 f3 = BLS12381.Fe12Zero;
        fe12 f0 = BLS12381.Fe12Zero;
        fe12 acc = BLS12381.Fe12Zero;
        eng = AddPair(eng, a2, b2);
        f2 = millerLoop(eng);
        fe12 f2OK = [
            [[0x04a16e602a2dbd5407ace9c0780cb06e523f3c5b72c028f8c6359aea96de5f470334784e163bdc0f0cbc7b2698cd3b85,       
            0x0f7613115947a8fa6564cde633adcfc1ce73a5b401b91e11aea3d72b88223775070ea6e8115363e873c5dbbbb8774c97],        
            [0x17b3f70724ae7f7c8f7dc14b2e0a9f619c0ea4e858cc137a4912baf0eea8fe03ce291deb2478f8067496f5fa86f007f6,        
            0x0d465ec3f7a87eae42d711ef04aa29eb0c58f412245fab133db6c4bcc84b4a1a32787f5f7289309b43f3c7af089dd448],        
            [0x029b7a40b334c8d89df69b21847a2109067be4204bcae60be04429e77e1be5c642599c22d6a8d3491e3cf8433d738e10,        
            0x0968a467fa5ab1899c0eb4932382d5a7849e7f68554a5c87356e54ebc5ea8056415920f7dfb3f0b0732fcefb2634b9d5]],       
            [[0x0f6f62a737f3000537a7000208127df14cb7529640b91684c36c00d37f6c1a5de0651987a8a244d6a3ddda56aefe1002,       
            0x125114d243366f6a736998c295f3def6e2895a3620aa8ae6218ca2bf6ed43b562c3587e20037448fb9378ad416dfe671],        
            [0x155bf40f96db0a6669504487046b2e85fb328489bd8c151544821f424cf04f50a94586fc7576ad3f5ccf6a30f0503816,        
            0x0e0e8bc28db074b275053f5d3cded7d25c7f3040acea69ec50633df9149376bd31e874f8411e6fa6a9235194af459d61],        
            [0x0c269c702b8aa74ab32b0ab1686abbd5289931eeb64307885424cc9d7dd19affd712016c6a07919e75bd66b3d4994cda,        
            0x1352c2234dd3032016471513a45c4126cc28cbcd9c8f11890e8e60f257172f4f2c6ca7be60c9f8dd127e8f95c3817399]]];   
        require(f2 == f2OK);

        eng = ResetPair(eng);
        eng = AddPair(eng, a3, b3);
        f3 = millerLoop(eng);
        fe12 f3OK = [
            [[0x08d33ba2b1600faff8adb4550b539e2cf40c0b838767ec8af04db09f2cf19f6b01b52ce66691fdeeef34c176c4464269,       
            0x15aac2770ec0d0771fbde3691e12c87e5f9d30e5bc6518b6ff1bd055834e33150ec2d1b3caec3e64bd5fda0d4e9f018c],        
            [0x0dbdcc3a7764c1c0228739aeee64a985fb8fcf5131643f0462338e26a827e48b00979ad56290461e91e75471028fc41e,        
            0x15ae426d2370493abf0088c166dfee85a8d14e85594df017c41fe5a195d9082893b30c1f6ef8abc4a976c470fd43eb29],        
            [0x0d58bac3db8266be7ae43c05d9c8d43f08253820ddbf5321811e5677ffb76accf6f371e0c1e40d97ea3750ce89af08ba,        
            0x0eeff16875f97a74a1044cfd44d85b073d5080b0d0d0857e91a0975627df12344aa58bb03c8b15320e535b1f21cabfc9]],       
            [[0x175a00695de9517207e21e8aa96bcc303502eda7ef0af12f3dff4053b3fdf2ede2bb4ab742800425c9e9fd7314d51c84,       
            0x0806c5f5ceae9286a630d2b71e433c271aa590f812657bc0e281b6dc58b9331731932f45e805a0c03f2c0f91b8bb658c],        
            [0x0dd8d04095476fa1de4214fc8d69ef65d4f4d2b1d6ef5f5521fc4ef24402b3f5e32b11d501febe3a4e48a6faca769569,        
            0x012dead040a862e4f881129efa53e04371d107a63c3cfd3269264e5c808dcaba14e47bc80b1a6b261e942a934e33574e],        
            [0x0b51ef4334ebcf0c00fe02831dac9784921a0da349e4288983656394847135ef7f5c5049de8d5bcabea1695530a74778,        
            0x0b91e56d46a08d7f1d1edfe76cdaa925f84333afb3d175bc5ad5039e22cd9eef67893d48dfeb5f173f0e7d9f2cb8d531]]];
        require(f3 == f3OK);

        eng = ResetPair(eng);
        eng = AddPairInv(eng, a0, b0);
        f0 = millerLoop(eng);
        fe12 f0OK = [
            [[0x0eda384aa6e1ca1c9e049994a6ded1dc1e2f5bf8b68eefd8524245b9e681d25bbb6a296b7f4d5c0b0a00550076aa9dab,       
            0x146fde5ffdf4796cd18f6a0c6478ea8b87c1fe7da4ba55b16b9d9e1ac451013d123020669e801cfa8d0ab53cc02fe4c1],        
            [0x1116b866835e233addb11cd819052897efd3f8f5202b0f862f164a4588f9a2a623fd279ba60e5ec31828d3f61a138f66,        
            0x155ad64587a1ad97c3a99d7a6c28ab35115f109e71c599bf3da17cc0ad51794212026936a7fe070f85c0c7ab98bbc0d9],        
            [0x11650f7aae0c3f04532040cf1b08c07ffe47bbe6716c04fe2cbb6b191e1458425f020b986ba6ff827400a0d45246ef28,        
            0x12fbd0dfd973803ab49663494a6e157b95be3361a6b1a00cf3094df5f708b4b7e8eafcb9f945db534cab85ee365b6c9c]],       
            [[0x007a961d0be71075341328355e4a0768bc7edd3426baca46c4f37b67cd1374b839c7c4d3c1bd765afc4fd34b6adbc246,       
            0x09e4b08bcf881b706b5001aed852a05c010a29cd29c631c361f1c771ae3fdf4cffc1a899abc94fd107b923c2122a6979],        
            [0x119885613347a9087dd88a58ae467704a4a52122887b221c10d26fd7089442a6ba160991c3e19cf1fcc8f99b5b932467,        
            0x19f907116bbb961756d9d0de26b21e68a2ebd107c9662a0886048d75241fed15aed495e3ec8a9d3847eefcbb0a2c93f8],        
            [0x0cc2bc96919cc7dfb1603de2955bba68102d5c700ac590d60c9c8af92a2c9df38cfbae82261d09353b1b4dd808ca8605,        
            0x0362aceeff867829870f121a16cf9e3567651fb6e77eb8c679973c3a99f5a41f3563561e0240ef5f2922c6ff80d947af]]];
        require(f0 == f0OK);

        acc = BLS12381.mulFe12(millerb1a1, f2);
        acc = BLS12381.mulFe12(acc, f3);
        acc = BLS12381.mulFe12(acc, f0);
        fe12 accOK = [ */
        fe12 acc = [
            [[0x02be91c6158b6b708b22a077840f029cd3df3c8e2caf0209272e993f71ad3d55bed30edd5a7401170e023028ccfbc29e,   
            0x097972e56910dc9f4400dabcca85b24a7c7b8508c86123affb5b2675f98cd5766076e912d7269b74b541705d6ae1cac6],    
            [0x1014b26491a0422453c98accf075fd73d7be608a981538183d716721d10a5d269504b74eb9d96e9b8028962519587127,    
            0x16a0d67282a04edee08aada3ef7fc698215cf9558d85eb1d839dc3ad682b3f03f3c4fad5ca28b7f17f065b0c6ca18ee5],    
            [0x18010488e75d08500f64d208f58645789a9ce1fc1d1dc55842b0936d81519b3d69999ec6a9b65aa5b5d29e4722993297,    
            0x06e60e6b9ee9d9256bcb21eac1893b7857064d5cb2f7dbab9a13ced3b44d53d88296e87aa1e6a8c81a4221a4a2cf7e91]],   
            [[0x058103a1d54f4aa46d3a7f1f4aafa348157020035f91efab28af194719f8b0e3b6d767d7f9dcd74354222383d31e6888,   
            0x0455840fb6b9133c401e983cd77dc9c292e547b0e4cf91a0db7259ef1549890e419037c0cfee39da457832272125be3b],    
            [0x0f229891ba1f7c27163de165659bb409b5ac7bdabeae4df075f59ac646fbd36333f528229d1bf3581a7df866ce4a6be6,    
            0x0fe1fbfab0fb3981aaa12da5c66437f0529f6499a4938a408b38d169a3402c29e85ee5132ee4c6ce1cdb54e6e7260888],    
            [0x0668235f020fd5414006d58e38b29d08d410b2a9125e720cc02db8d44c57d4d6ebb82d6835b81bd7b38bf14b23c7257b,    
            0x16e12e76754ea584756fe92a76186a9e0a165e89cbad11d1c761958b2150d912d4bb5d8738f9df74810c25d89bef962e]]];  
        // return(acc == accOK);

        acc = finalExp(acc);

        return BLS12381.isOneFe12(acc);
    }
}

